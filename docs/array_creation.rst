.. _array_creation:

Array Creation
==============
.. **intro start**

| JZarr has several functions for creating arrays.
| Arrays can be created with or without a given storage.
| If no storage is given a default in memory store will be used instead.
| Arrays can be created with or without additional user defined attributes.

| At least there is only one mandatory information which must be given at creation time.
| To create an instance of com.bc.zarr.ZarrArray at least a shape must be given


.. _simple_small_array:

Simple small array
------------------

.. highlight:: java

.. literalinclude:: ../src/test/examples/array/creation/InMemoryArray.java
  :caption: `snippet 1 from InMemoryArray.java <https://github.com/bcdev/jzarr/blob/master/src/test/examples/array/creation/InMemoryArray.java#L20>`_
  :start-after: snippet 1
  :end-before: end 1
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output::

 com.bc.zarr.ZarrArray{shape=[10, 8], chunks=[10, 8], dataType=f8, fillValue=0, compressor=zlib/level=1, store=InMemoryStore, byteOrder=BIG_ENDIAN}
The output describes that an array with the following characteristics has been created

===========  ==========================================
property     value
===========  ==========================================
shape        y:10 x:8
chunks       also y:10 x:8
data type    :ref:`f8 <data-types>` :code:`default`
data type    :ref:`f8 <dtype>` :code:`default`
fill value   :code:`0` :code:`default`
compressor   zlib compressor with level 1 :code:`default`
store        InMemoryStore :code:`default`
byte order   BIG_ENDIAN :code:`default`
===========  ==========================================

Why are chunks dimensions the same as shape dimension?
  | If chunks is not given, a default chunks size of 512 in each dimension, will be applied.
  | If a chunk dimension is bigger than the corresponding shape dimension, the chunk dimension will be trimmed to shape dimension.
  | For detailed explanation see :ref:`Array Parameter explanation <array_params>`

.. _array_with_automatically_computed_chunk_size:

Array with automatically computed chunk size
--------------------------------------------
.. highlight:: java

.. literalinclude:: ../src/test/examples/array/creation/InMemoryArray.java
  :language: java
  :caption: `snippet 2 from InMemoryArray.java <https://github.com/bcdev/jzarr/blob/master/src/test/examples/array/creation/InMemoryArray.java#L31>`_
  :start-after: snippet 2
  :end-before: end 2
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output::

 com.bc.zarr.ZarrArray{shape=[4000, 3500], chunks=[500, 500], dataType=f8, fillValue=0, compressor=zlib/level=1, store=InMemoryStore, byteOrder=BIG_ENDIAN}
As you can see now, the chunk size in both dimensions is 500. This is an autogenerated chunk size.

.. _array_with_disabled_chunking:

Array with disabled chunking
----------------------------
.. highlight:: java

.. literalinclude:: ../src/test/examples/array/creation/InMemoryArray.java
  :language: java
  :caption: `snippet 3 from InMemoryArray.java <https://github.com/bcdev/jzarr/blob/master/src/test/examples/array/creation/InMemoryArray.java#L42>`_
  :start-after: snippet 3
  :end-before: end 3
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output::

 com.bc.zarr.ZarrArray{shape=[4000, 3500], chunks=[4000, 3500], dataType=f8, fillValue=0, compressor=zlib/level=1, store=InMemoryStore, byteOrder=BIG_ENDIAN}
Now you can see, the chunk size ins the same as shape size.

.. _array_with_user_defined_chunks:

Array with user defined chunks
------------------------------
.. highlight:: java

.. literalinclude:: ../src/test/examples/array/creation/InMemoryArray.java
  :language: java
  :caption: `snippet 4 from InMemoryArray.java <https://github.com/bcdev/jzarr/blob/master/src/test/examples/array/creation/InMemoryArray.java#L54>`_
  :start-after: snippet 4
  :end-before: end 4
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output::

 com.bc.zarr.ZarrArray{shape=[4000, 3500], chunks=[400, 350], dataType=f8, fillValue=0, compressor=zlib/level=1, store=InMemoryStore, byteOrder=BIG_ENDIAN}
Chunk size now are user defined [400, 350] .

.. _write_read_data_to_from_array:

Write/Read data to and from array
---------------------------------
.. highlight:: java

.. literalinclude:: ../src/test/examples/array/creation/InMemoryArray.java
  :language: java
  :caption: `snippet 5 from InMemoryArray.java <https://github.com/bcdev/jzarr/blob/master/src/test/examples/array/creation/InMemoryArray.java#L66>`_
  :start-after: snippet 5
  :end-before: end 5
  :dedent: 8

.. highlight:: none

Creates the following output::

 Snippet 5
 line 0 = [-1, -1, -1, -1, -1, -1, -1]
 line 1 = [-1, 11, 12, 13, 14, 15, -1]
 line 2 = [-1, 21, 22, 23, 24, 25, -1]
 line 3 = [-1, 31, 32, 33, 34, 35, -1]
 line 4 = [-1, -1, -1, -1, -1, -1, -1]

We can see now, the data is written in the center of the array.
And we can see a :code:`-1` value border which is the fill value we had defined above.

