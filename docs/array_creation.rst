.. _array_creation:

Array Creation
==============
.. **intro start**

| JZarr has several functions for creating arrays.
| Arrays can be created with or without a given storage.
| If no storage is given a store in memory is used as default.
| Arrays can be created with or without additional user defined attributes.

| The shape is the only mandatory information which must be given to create arrays.

.. _simple_small_array:

Simple small array
------------------

.. highlight:: java

.. literalinclude:: ./examples/java/ArrayCreation.java
  :caption: `snippet 1 from ArrayCreation.java <https://github.com/bcdev/jzarr/blob/master/docs/examples/java/ArrayCreation.java>`_
  :start-after: void example_1
  :end-before: createOutput
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output

.. literalinclude:: ./examples/output/ArrayCreation_example_1.txt

The output describes that an array with the following characteristics has been created

===========  ==========================================
property     value
===========  ==========================================
shape        y:10 x:8
chunks       y:10 x:8
data type    :ref:`f8 <data-types>` :code:`default`
data type    :ref:`f8 <dtype>` :code:`default`
fill value   :code:`0` :code:`default`
compressor   zlib compressor with level 1 :code:`default`
store        InMemoryStore :code:`default`
byte order   BIG_ENDIAN :code:`default`
===========  ==========================================

Why are chunks dimensions the same as shape dimension?
  | If chunks is not given, a default chunks size of 512 in each dimension, will be applied.
  | If a chunk dimension is bigger than the corresponding shape dimension, the chunk dimension will be trimmed to shape dimension.
  | For detailed explanation see :ref:`Array Parameter explanation <array_params>`

.. _array_with_automatically_computed_chunk_size:

Array with automatically computed chunk size
--------------------------------------------
.. highlight:: java

.. literalinclude:: ./examples/java/ArrayCreation.java
  :caption: `example 2 from ArrayCreation.java <https://github.com/bcdev/jzarr/blob/master/docs/examples/java/ArrayCreation.java>`_
  :start-after: void example_2
  :end-before: createOutput
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output

.. literalinclude:: ./examples/output/ArrayCreation_example_2.txt

As you can see now, the chunk size in both dimensions is 500. This is an autogenerated chunk size.

.. _array_with_disabled_chunking:

Array with disabled chunking
----------------------------
.. highlight:: java

.. literalinclude:: ./examples/java/ArrayCreation.java
  :caption: `example 3 from ArrayCreation.java <https://github.com/bcdev/jzarr/blob/master/docs/examples/java/ArrayCreation.java>`_
  :start-after: void example_3
  :end-before: createOutput
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output

.. literalinclude:: ./examples/output/ArrayCreation_example_3.txt

Now you can see, the chunk size ins the same as shape size.

.. _array_with_user_defined_chunks:

Array with user defined chunks
------------------------------
.. highlight:: java

.. literalinclude:: ./examples/java/ArrayCreation.java
  :caption: `example 4 from ArrayCreation.java <https://github.com/bcdev/jzarr/blob/master/docs/examples/java/ArrayCreation.java>`_
  :start-after: void example_4
  :end-before: createOutput
  :dedent: 8

.. highlight:: none

A :code:`System.out.println(array);` then creates the following output

.. literalinclude:: ./examples/output/ArrayCreation_example_4.txt
Chunk size now are user defined [400, 350] .

.. _write_read_data_to_from_array:

Write/Read data to and from array
---------------------------------
1. First creates an array with size 5 * 7 and with a fill value of :code:`-1`.
2. Then write data with the shape 3 * 5 into the center of the array.
3. Read the data from the entire array (int[] with size 5 * 7)
4. | Print out the entire data and we can see the data written before
   | surrounded by the fill value :code:`-1`.

.. highlight:: java

.. literalinclude:: ./examples/java/ArrayCreation.java
  :caption: `example 5 from ArrayCreation.java <https://github.com/bcdev/jzarr/blob/master/docs/examples/java/ArrayCreation.java>`_
  :start-after: void example_5
  :end-before: createOutput
  :dedent: 8

.. highlight:: none

Creates the following output

.. literalinclude:: ./examples/output/ArrayCreation_example_5.txt

| The output displays that the data is written to the center of the array.
| The written data is surrounded by a :code:`-1` value border which is the fill value defined above.

